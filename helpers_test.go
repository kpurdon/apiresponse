package apiresponse

import (
	"net/http"
	"net/http/httptest"
	"testing"

	"github.com/stretchr/testify/assert"
)

// this file is generated by go generate ... do not modify

func TestResponderAccepted(t *testing.T) {
	w := httptest.NewRecorder()
	actual := NewResponder(w)
	actual.Accepted()
	assert.Equal(t, http.StatusAccepted, w.Code)
}

func TestResponderAlreadyReported(t *testing.T) {
	w := httptest.NewRecorder()
	actual := NewResponder(w)
	actual.AlreadyReported()
	assert.Equal(t, http.StatusAlreadyReported, w.Code)
}

func TestResponderBadGateway(t *testing.T) {
	w := httptest.NewRecorder()
	actual := NewResponder(w)
	actual.BadGateway()
	assert.Equal(t, http.StatusBadGateway, w.Code)
}

func TestResponderBadRequest(t *testing.T) {
	w := httptest.NewRecorder()
	actual := NewResponder(w)
	actual.BadRequest()
	assert.Equal(t, http.StatusBadRequest, w.Code)
}

func TestResponderConflict(t *testing.T) {
	w := httptest.NewRecorder()
	actual := NewResponder(w)
	actual.Conflict()
	assert.Equal(t, http.StatusConflict, w.Code)
}

func TestResponderContinue(t *testing.T) {
	w := httptest.NewRecorder()
	actual := NewResponder(w)
	actual.Continue()
	assert.Equal(t, http.StatusContinue, w.Code)
}

func TestResponderCreated(t *testing.T) {
	w := httptest.NewRecorder()
	actual := NewResponder(w)
	actual.Created()
	assert.Equal(t, http.StatusCreated, w.Code)
}

func TestResponderExpectationFailed(t *testing.T) {
	w := httptest.NewRecorder()
	actual := NewResponder(w)
	actual.ExpectationFailed()
	assert.Equal(t, http.StatusExpectationFailed, w.Code)
}

func TestResponderFailedDependency(t *testing.T) {
	w := httptest.NewRecorder()
	actual := NewResponder(w)
	actual.FailedDependency()
	assert.Equal(t, http.StatusFailedDependency, w.Code)
}

func TestResponderForbidden(t *testing.T) {
	w := httptest.NewRecorder()
	actual := NewResponder(w)
	actual.Forbidden()
	assert.Equal(t, http.StatusForbidden, w.Code)
}

func TestResponderFound(t *testing.T) {
	w := httptest.NewRecorder()
	actual := NewResponder(w)
	actual.Found()
	assert.Equal(t, http.StatusFound, w.Code)
}

func TestResponderGatewayTimeout(t *testing.T) {
	w := httptest.NewRecorder()
	actual := NewResponder(w)
	actual.GatewayTimeout()
	assert.Equal(t, http.StatusGatewayTimeout, w.Code)
}

func TestResponderGone(t *testing.T) {
	w := httptest.NewRecorder()
	actual := NewResponder(w)
	actual.Gone()
	assert.Equal(t, http.StatusGone, w.Code)
}

func TestResponderHTTPVersionNotSupported(t *testing.T) {
	w := httptest.NewRecorder()
	actual := NewResponder(w)
	actual.HTTPVersionNotSupported()
	assert.Equal(t, http.StatusHTTPVersionNotSupported, w.Code)
}

func TestResponderIMUsed(t *testing.T) {
	w := httptest.NewRecorder()
	actual := NewResponder(w)
	actual.IMUsed()
	assert.Equal(t, http.StatusIMUsed, w.Code)
}

func TestResponderInsufficientStorage(t *testing.T) {
	w := httptest.NewRecorder()
	actual := NewResponder(w)
	actual.InsufficientStorage()
	assert.Equal(t, http.StatusInsufficientStorage, w.Code)
}

func TestResponderInternalServerError(t *testing.T) {
	w := httptest.NewRecorder()
	actual := NewResponder(w)
	actual.InternalServerError()
	assert.Equal(t, http.StatusInternalServerError, w.Code)
}

func TestResponderLengthRequired(t *testing.T) {
	w := httptest.NewRecorder()
	actual := NewResponder(w)
	actual.LengthRequired()
	assert.Equal(t, http.StatusLengthRequired, w.Code)
}

func TestResponderLocked(t *testing.T) {
	w := httptest.NewRecorder()
	actual := NewResponder(w)
	actual.Locked()
	assert.Equal(t, http.StatusLocked, w.Code)
}

func TestResponderLoopDetected(t *testing.T) {
	w := httptest.NewRecorder()
	actual := NewResponder(w)
	actual.LoopDetected()
	assert.Equal(t, http.StatusLoopDetected, w.Code)
}

func TestResponderMethodNotAllowed(t *testing.T) {
	w := httptest.NewRecorder()
	actual := NewResponder(w)
	actual.MethodNotAllowed()
	assert.Equal(t, http.StatusMethodNotAllowed, w.Code)
}

func TestResponderMisdirectedRequest(t *testing.T) {
	w := httptest.NewRecorder()
	actual := NewResponder(w)
	actual.MisdirectedRequest()
	assert.Equal(t, http.StatusMisdirectedRequest, w.Code)
}

func TestResponderMovedPermanently(t *testing.T) {
	w := httptest.NewRecorder()
	actual := NewResponder(w)
	actual.MovedPermanently()
	assert.Equal(t, http.StatusMovedPermanently, w.Code)
}

func TestResponderMultiStatus(t *testing.T) {
	w := httptest.NewRecorder()
	actual := NewResponder(w)
	actual.MultiStatus()
	assert.Equal(t, http.StatusMultiStatus, w.Code)
}

func TestResponderMultipleChoices(t *testing.T) {
	w := httptest.NewRecorder()
	actual := NewResponder(w)
	actual.MultipleChoices()
	assert.Equal(t, http.StatusMultipleChoices, w.Code)
}

func TestResponderNetworkAuthenticationRequired(t *testing.T) {
	w := httptest.NewRecorder()
	actual := NewResponder(w)
	actual.NetworkAuthenticationRequired()
	assert.Equal(t, http.StatusNetworkAuthenticationRequired, w.Code)
}

func TestResponderNoContent(t *testing.T) {
	w := httptest.NewRecorder()
	actual := NewResponder(w)
	actual.NoContent()
	assert.Equal(t, http.StatusNoContent, w.Code)
}

func TestResponderNonAuthoritativeInfo(t *testing.T) {
	w := httptest.NewRecorder()
	actual := NewResponder(w)
	actual.NonAuthoritativeInfo()
	assert.Equal(t, http.StatusNonAuthoritativeInfo, w.Code)
}

func TestResponderNotAcceptable(t *testing.T) {
	w := httptest.NewRecorder()
	actual := NewResponder(w)
	actual.NotAcceptable()
	assert.Equal(t, http.StatusNotAcceptable, w.Code)
}

func TestResponderNotExtended(t *testing.T) {
	w := httptest.NewRecorder()
	actual := NewResponder(w)
	actual.NotExtended()
	assert.Equal(t, http.StatusNotExtended, w.Code)
}

func TestResponderNotFound(t *testing.T) {
	w := httptest.NewRecorder()
	actual := NewResponder(w)
	actual.NotFound()
	assert.Equal(t, http.StatusNotFound, w.Code)
}

func TestResponderNotImplemented(t *testing.T) {
	w := httptest.NewRecorder()
	actual := NewResponder(w)
	actual.NotImplemented()
	assert.Equal(t, http.StatusNotImplemented, w.Code)
}

func TestResponderNotModified(t *testing.T) {
	w := httptest.NewRecorder()
	actual := NewResponder(w)
	actual.NotModified()
	assert.Equal(t, http.StatusNotModified, w.Code)
}

func TestResponderOK(t *testing.T) {
	w := httptest.NewRecorder()
	actual := NewResponder(w)
	actual.OK()
	assert.Equal(t, http.StatusOK, w.Code)
}

func TestResponderPartialContent(t *testing.T) {
	w := httptest.NewRecorder()
	actual := NewResponder(w)
	actual.PartialContent()
	assert.Equal(t, http.StatusPartialContent, w.Code)
}

func TestResponderPaymentRequired(t *testing.T) {
	w := httptest.NewRecorder()
	actual := NewResponder(w)
	actual.PaymentRequired()
	assert.Equal(t, http.StatusPaymentRequired, w.Code)
}

func TestResponderPermanentRedirect(t *testing.T) {
	w := httptest.NewRecorder()
	actual := NewResponder(w)
	actual.PermanentRedirect()
	assert.Equal(t, http.StatusPermanentRedirect, w.Code)
}

func TestResponderPreconditionFailed(t *testing.T) {
	w := httptest.NewRecorder()
	actual := NewResponder(w)
	actual.PreconditionFailed()
	assert.Equal(t, http.StatusPreconditionFailed, w.Code)
}

func TestResponderPreconditionRequired(t *testing.T) {
	w := httptest.NewRecorder()
	actual := NewResponder(w)
	actual.PreconditionRequired()
	assert.Equal(t, http.StatusPreconditionRequired, w.Code)
}

func TestResponderProcessing(t *testing.T) {
	w := httptest.NewRecorder()
	actual := NewResponder(w)
	actual.Processing()
	assert.Equal(t, http.StatusProcessing, w.Code)
}

func TestResponderProxyAuthRequired(t *testing.T) {
	w := httptest.NewRecorder()
	actual := NewResponder(w)
	actual.ProxyAuthRequired()
	assert.Equal(t, http.StatusProxyAuthRequired, w.Code)
}

func TestResponderRequestEntityTooLarge(t *testing.T) {
	w := httptest.NewRecorder()
	actual := NewResponder(w)
	actual.RequestEntityTooLarge()
	assert.Equal(t, http.StatusRequestEntityTooLarge, w.Code)
}

func TestResponderRequestHeaderFieldsTooLarge(t *testing.T) {
	w := httptest.NewRecorder()
	actual := NewResponder(w)
	actual.RequestHeaderFieldsTooLarge()
	assert.Equal(t, http.StatusRequestHeaderFieldsTooLarge, w.Code)
}

func TestResponderRequestTimeout(t *testing.T) {
	w := httptest.NewRecorder()
	actual := NewResponder(w)
	actual.RequestTimeout()
	assert.Equal(t, http.StatusRequestTimeout, w.Code)
}

func TestResponderRequestURITooLong(t *testing.T) {
	w := httptest.NewRecorder()
	actual := NewResponder(w)
	actual.RequestURITooLong()
	assert.Equal(t, http.StatusRequestURITooLong, w.Code)
}

func TestResponderRequestedRangeNotSatisfiable(t *testing.T) {
	w := httptest.NewRecorder()
	actual := NewResponder(w)
	actual.RequestedRangeNotSatisfiable()
	assert.Equal(t, http.StatusRequestedRangeNotSatisfiable, w.Code)
}

func TestResponderResetContent(t *testing.T) {
	w := httptest.NewRecorder()
	actual := NewResponder(w)
	actual.ResetContent()
	assert.Equal(t, http.StatusResetContent, w.Code)
}

func TestResponderSeeOther(t *testing.T) {
	w := httptest.NewRecorder()
	actual := NewResponder(w)
	actual.SeeOther()
	assert.Equal(t, http.StatusSeeOther, w.Code)
}

func TestResponderServiceUnavailable(t *testing.T) {
	w := httptest.NewRecorder()
	actual := NewResponder(w)
	actual.ServiceUnavailable()
	assert.Equal(t, http.StatusServiceUnavailable, w.Code)
}

func TestResponderSwitchingProtocols(t *testing.T) {
	w := httptest.NewRecorder()
	actual := NewResponder(w)
	actual.SwitchingProtocols()
	assert.Equal(t, http.StatusSwitchingProtocols, w.Code)
}

func TestResponderTeapot(t *testing.T) {
	w := httptest.NewRecorder()
	actual := NewResponder(w)
	actual.Teapot()
	assert.Equal(t, http.StatusTeapot, w.Code)
}

func TestResponderTemporaryRedirect(t *testing.T) {
	w := httptest.NewRecorder()
	actual := NewResponder(w)
	actual.TemporaryRedirect()
	assert.Equal(t, http.StatusTemporaryRedirect, w.Code)
}

func TestResponderTooManyRequests(t *testing.T) {
	w := httptest.NewRecorder()
	actual := NewResponder(w)
	actual.TooManyRequests()
	assert.Equal(t, http.StatusTooManyRequests, w.Code)
}

func TestResponderUnauthorized(t *testing.T) {
	w := httptest.NewRecorder()
	actual := NewResponder(w)
	actual.Unauthorized()
	assert.Equal(t, http.StatusUnauthorized, w.Code)
}

func TestResponderUnavailableForLegalReasons(t *testing.T) {
	w := httptest.NewRecorder()
	actual := NewResponder(w)
	actual.UnavailableForLegalReasons()
	assert.Equal(t, http.StatusUnavailableForLegalReasons, w.Code)
}

func TestResponderUnprocessableEntity(t *testing.T) {
	w := httptest.NewRecorder()
	actual := NewResponder(w)
	actual.UnprocessableEntity()
	assert.Equal(t, http.StatusUnprocessableEntity, w.Code)
}

func TestResponderUnsupportedMediaType(t *testing.T) {
	w := httptest.NewRecorder()
	actual := NewResponder(w)
	actual.UnsupportedMediaType()
	assert.Equal(t, http.StatusUnsupportedMediaType, w.Code)
}

func TestResponderUpgradeRequired(t *testing.T) {
	w := httptest.NewRecorder()
	actual := NewResponder(w)
	actual.UpgradeRequired()
	assert.Equal(t, http.StatusUpgradeRequired, w.Code)
}

func TestResponderUseProxy(t *testing.T) {
	w := httptest.NewRecorder()
	actual := NewResponder(w)
	actual.UseProxy()
	assert.Equal(t, http.StatusUseProxy, w.Code)
}

func TestResponderVariantAlsoNegotiates(t *testing.T) {
	w := httptest.NewRecorder()
	actual := NewResponder(w)
	actual.VariantAlsoNegotiates()
	assert.Equal(t, http.StatusVariantAlsoNegotiates, w.Code)
}
