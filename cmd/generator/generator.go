package main

import (
	"flag"
	"fmt"
	"go/importer"
	"html/template"
	"log"
	"os"
	"path/filepath"
	"strings"
)

func main() {
	outDir := flag.String("out-dir", "", "directory to write output to")
	tmplDir := flag.String("tmpl-dir", "", "directory to templates")
	flag.Parse()

	names := getStatusNames()
	generateCode(*outDir, *tmplDir, names)
	generateTests(*outDir, *tmplDir, names)
}

func getStatusNames() []string {
	pkgHTTP, err := importer.Default().Import("net/http")
	if err != nil {
		log.Fatal(err)
	}

	names := make([]string, 0)
	for _, name := range pkgHTTP.Scope().Names() {
		if strings.HasPrefix(name, "Status") {
			strippedName := strings.SplitAfter(name, "Status")[1]
			// skip the StatusText method
			if strippedName == "Text" {
				continue
			}
			names = append(names, strippedName)
		}
	}

	return names
}

func generateCode(outDir, tmplDir string, names []string) {
	tmpl, err := template.ParseFiles(filepath.Join(tmplDir, "code.go.tmpl"))
	if err != nil {
		log.Fatal(err)
	}

	f, err := os.Create(fmt.Sprintf("%s/helpers.go", outDir))
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()

	f.WriteString("package apiresponse\n")
	f.WriteString("// this file is generated by go generate ... do not modify\n")

	for _, n := range names {
		err := tmpl.Execute(f, struct{ Name string }{Name: n})
		if err != nil {
			log.Fatal(err)
		}
	}
}

func generateTests(outDir, tmplDir string, names []string) {
	tmpl, err := template.ParseFiles(filepath.Join(tmplDir, "test.go.tmpl"))
	if err != nil {
		log.Fatal(err)
	}

	f, err := os.Create(fmt.Sprintf("%s/helpers_test.go", outDir))
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()

	f.WriteString("package apiresponse\n")
	f.WriteString("// this file is generated by go generate ... do not modify\n")

	for _, n := range names {
		err := tmpl.Execute(f, struct{ Name string }{Name: n})
		if err != nil {
			log.Fatal(err)
		}
	}
}
